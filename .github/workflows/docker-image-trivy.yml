name: Docker Image CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx (for efficient builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Build lightweight multi-stage Docker image
      - name: Build lightweight Docker image
        id: build-image
        run: |
          IMAGE_NAME=my-lightweight-app
          TAG=$(date +%s)
          docker build . -f Dockerfile -t $IMAGE_NAME:$TAG
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "âœ… Built image $IMAGE_NAME:$TAG"

      # Step 4: Scan image with Trivy
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.TAG }}
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'       # change to '1' if you want to fail the pipeline on vulnerabilities
          ignore-unfixed: true

      # Step 5: Show image size
      - name: Show image size
        run: docker images ${{ env.IMAGE_NAME }}:${{ env.TAG }}

      # Step 6: Clean up to free memory/disk
      - name: Cleanup Docker cache
        if: always()
        run: |
          echo "ðŸ§¹ Cleaning up Docker..."
          docker system prune -af --volumes
          echo "âœ… Cleanup complete!"
